// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: service_version.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createServiceVersion = `-- name: CreateServiceVersion :one
INSERT INTO service_versions (
    changelog, version, service_id
) VALUES (
    $1, $2, $3
) RETURNING id, changelog, version, service_id, created_at, updated_at, deleted_at
`

type CreateServiceVersionParams struct {
	Changelog string    `json:"changelog"`
	Version   string    `json:"version"`
	ServiceID uuid.UUID `json:"service_id"`
}

func (q *Queries) CreateServiceVersion(ctx context.Context, arg CreateServiceVersionParams) (ServiceVersion, error) {
	row := q.db.QueryRowContext(ctx, createServiceVersion, arg.Changelog, arg.Version, arg.ServiceID)
	var i ServiceVersion
	err := row.Scan(
		&i.ID,
		&i.Changelog,
		&i.Version,
		&i.ServiceID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteAllServiceVersions = `-- name: DeleteAllServiceVersions :exec
DELETE FROM service_versions WHERE 1 = 1
`

func (q *Queries) DeleteAllServiceVersions(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteAllServiceVersions)
	return err
}

const getServiceVersionsCount = `-- name: GetServiceVersionsCount :one
SELECT COUNT(id) AS total
FROM service_versions
WHERE service_id = $1
`

func (q *Queries) GetServiceVersionsCount(ctx context.Context, serviceID uuid.UUID) (int64, error) {
	row := q.db.QueryRowContext(ctx, getServiceVersionsCount, serviceID)
	var total int64
	err := row.Scan(&total)
	return total, err
}

const getVersionsByServiceID = `-- name: GetVersionsByServiceID :many
SELECT id, changelog, version, service_id, created_at, updated_at, deleted_at
FROM service_versions
WHERE service_id = $1
`

func (q *Queries) GetVersionsByServiceID(ctx context.Context, serviceID uuid.UUID) ([]ServiceVersion, error) {
	rows, err := q.db.QueryContext(ctx, getVersionsByServiceID, serviceID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ServiceVersion
	for rows.Next() {
		var i ServiceVersion
		if err := rows.Scan(
			&i.ID,
			&i.Changelog,
			&i.Version,
			&i.ServiceID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
