// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/JekaTka/services-api/db/sqlc (interfaces: Store)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	reflect "reflect"

	db "github.com/JekaTka/services-api/db/sqlc"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CreateService mocks base method.
func (m *MockStore) CreateService(arg0 context.Context, arg1 db.CreateServiceParams) (db.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateService", arg0, arg1)
	ret0, _ := ret[0].(db.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateService indicates an expected call of CreateService.
func (mr *MockStoreMockRecorder) CreateService(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateService", reflect.TypeOf((*MockStore)(nil).CreateService), arg0, arg1)
}

// CreateServiceVersion mocks base method.
func (m *MockStore) CreateServiceVersion(arg0 context.Context, arg1 db.CreateServiceVersionParams) (db.ServiceVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateServiceVersion", arg0, arg1)
	ret0, _ := ret[0].(db.ServiceVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateServiceVersion indicates an expected call of CreateServiceVersion.
func (mr *MockStoreMockRecorder) CreateServiceVersion(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateServiceVersion", reflect.TypeOf((*MockStore)(nil).CreateServiceVersion), arg0, arg1)
}

// DeleteAllServiceVersions mocks base method.
func (m *MockStore) DeleteAllServiceVersions(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllServiceVersions", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllServiceVersions indicates an expected call of DeleteAllServiceVersions.
func (mr *MockStoreMockRecorder) DeleteAllServiceVersions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllServiceVersions", reflect.TypeOf((*MockStore)(nil).DeleteAllServiceVersions), arg0)
}

// DeleteAllServices mocks base method.
func (m *MockStore) DeleteAllServices(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllServices", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllServices indicates an expected call of DeleteAllServices.
func (mr *MockStoreMockRecorder) DeleteAllServices(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllServices", reflect.TypeOf((*MockStore)(nil).DeleteAllServices), arg0)
}

// GetServiceByID mocks base method.
func (m *MockStore) GetServiceByID(arg0 context.Context, arg1 uuid.UUID) (db.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceByID", arg0, arg1)
	ret0, _ := ret[0].(db.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceByID indicates an expected call of GetServiceByID.
func (mr *MockStoreMockRecorder) GetServiceByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceByID", reflect.TypeOf((*MockStore)(nil).GetServiceByID), arg0, arg1)
}

// GetServiceVersionsCount mocks base method.
func (m *MockStore) GetServiceVersionsCount(arg0 context.Context, arg1 uuid.UUID) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceVersionsCount", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceVersionsCount indicates an expected call of GetServiceVersionsCount.
func (mr *MockStoreMockRecorder) GetServiceVersionsCount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceVersionsCount", reflect.TypeOf((*MockStore)(nil).GetServiceVersionsCount), arg0, arg1)
}

// GetServicesCount mocks base method.
func (m *MockStore) GetServicesCount(arg0 context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServicesCount", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServicesCount indicates an expected call of GetServicesCount.
func (mr *MockStoreMockRecorder) GetServicesCount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServicesCount", reflect.TypeOf((*MockStore)(nil).GetServicesCount), arg0)
}

// GetVersionsByServiceID mocks base method.
func (m *MockStore) GetVersionsByServiceID(arg0 context.Context, arg1 uuid.UUID) ([]db.ServiceVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVersionsByServiceID", arg0, arg1)
	ret0, _ := ret[0].([]db.ServiceVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVersionsByServiceID indicates an expected call of GetVersionsByServiceID.
func (mr *MockStoreMockRecorder) GetVersionsByServiceID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVersionsByServiceID", reflect.TypeOf((*MockStore)(nil).GetVersionsByServiceID), arg0, arg1)
}

// ListServices mocks base method.
func (m *MockStore) ListServices(arg0 context.Context, arg1 db.ListServicesParams) ([]db.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListServices", arg0, arg1)
	ret0, _ := ret[0].([]db.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListServices indicates an expected call of ListServices.
func (mr *MockStoreMockRecorder) ListServices(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServices", reflect.TypeOf((*MockStore)(nil).ListServices), arg0, arg1)
}
